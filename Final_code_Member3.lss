
Final_code_Member3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000bb4  00000c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080006e  0080006e  00000c56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e2  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a0  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f5  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a80  00000000  00000000  00003721  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000041a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <main>
  8a:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_DC>:
//Function to initialize port settings
void init_DC()
{
	//Set Data Direction Register to output mode for
	// Motor Driver1 pin 1
	DC1_1_DDR = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
  96:	08 95       	ret

00000098 <DC_Rotate>:
}

//Function to DC Motor Rotate
void DC_Rotate()
{
	OUTPUT_DC_PORT = 0x10; //set PC4 pin as high
  98:	80 e1       	ldi	r24, 0x10	; 16
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	08 95       	ret

0000009e <DC_Stop>:
}

//Function to DC Motor Stop
void DC_Stop()
{
	OUTPUT_DC_PORT = 0x00; // set all pins as low
  9e:	15 ba       	out	0x15, r1	; 21
  a0:	08 95       	ret

000000a2 <init_io>:
 	void init_io()
 	{
	
	 	//Set Data Direction Register to output mode for
	 	//Green LED pin
	 	LED_G_DDR = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 bb       	out	0x14, r24	; 20
		 
		//Set Data Direction Register to output mode for
		//Red LED pin
		LED_R_DDR |= (1<<(LED_R_BIT));
  a6:	84 b3       	in	r24, 0x14	; 20
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	84 bb       	out	0x14, r24	; 20
  ac:	08 95       	ret

000000ae <LED_G_ON>:
	 	
 	}
// Function for Green LED on
void LED_G_ON()
{
	OUTPUT_LED_PORT = 0x40; // set PC6 as high
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	08 95       	ret

000000b4 <LED_G_OFF>:
}

// Function for Green LED off
void LED_G_OFF()
{
	OUTPUT_LED_PORT = 0x00; // set PC6 pin as low
  b4:	15 ba       	out	0x15, r1	; 21
  b6:	08 95       	ret

000000b8 <LED_R_ON>:
}

// Function for Red LED on
void LED_R_ON()
{
	OUTPUT_LED_PORT |= (1<<(LED_R_BIT)); // set PC7 pin as high 
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	85 bb       	out	0x15, r24	; 21
  be:	08 95       	ret

000000c0 <LED_R_OFF>:
}

// Function for Red LED off
void LED_R_OFF()
{
	OUTPUT_LED_PORT &=~ (1<<(LED_R_BIT)); // set PC7 pin as low
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	08 95       	ret

000000c8 <Red_LED>:
}

void Red_LED()
{
	//Code for blink Red LED
	LED_R_ON();
  c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <LED_R_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	89 e6       	ldi	r24, 0x69	; 105
  d0:	98 e1       	ldi	r25, 0x18	; 24
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <Red_LED+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Red_LED+0x14>
  dc:	00 00       	nop
	_delay_ms(1000);
	LED_R_OFF();
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <LED_R_OFF>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <Red_LED+0x20>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Red_LED+0x2a>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <Green_LED>:
}

void Green_LED()
{
	//Code for blink Red LED
	LED_G_ON();
  f6:	0e 94 57 00 	call	0xae	; 0xae <LED_G_ON>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	89 e6       	ldi	r24, 0x69	; 105
  fe:	98 e1       	ldi	r25, 0x18	; 24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <Green_LED+0xa>
 108:	00 c0       	rjmp	.+0      	; 0x10a <Green_LED+0x14>
 10a:	00 00       	nop
	_delay_ms(1000);
	LED_G_OFF();
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LED_G_OFF>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	98 e1       	ldi	r25, 0x18	; 24
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <Green_LED+0x20>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Green_LED+0x2a>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <setup_wheel>:
}


//function to get calculation according to our parameters of wheel, tutorial and step angle of stepper motor
void setup_wheel(void)
{
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
	DDRC = 0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 bb       	out	0x14, r24	; 20
	rounds_per_Round = 360/(angle*8); // to calculate no of rotations per round (1 because of 45 degrees step angle)
 130:	c0 90 6a 00 	lds	r12, 0x006A	; 0x80006a <angle>
 134:	d0 90 6b 00 	lds	r13, 0x006B	; 0x80006b <angle+0x1>
 138:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <angle+0x2>
 13c:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <angle+0x3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	51 e4       	ldi	r21, 0x41	; 65
 148:	c7 01       	movw	r24, r14
 14a:	b6 01       	movw	r22, r12
 14c:	0e 94 6b 05 	call	0xad6	; 0xad6 <__mulsf3>
 150:	9b 01       	movw	r18, r22
 152:	ac 01       	movw	r20, r24
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	84 eb       	ldi	r24, 0xB4	; 180
 15a:	93 e4       	ldi	r25, 0x43	; 67
 15c:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
 160:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <rounds_per_Round>
 164:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <rounds_per_Round+0x1>
 168:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <rounds_per_Round+0x2>
 16c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <rounds_per_Round+0x3>
	round_length = (2*22/7*radius); // to calculate the length per rotation
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 ec       	ldi	r20, 0xC0	; 192
 176:	50 e4       	ldi	r21, 0x40	; 64
 178:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <radius>
 17c:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <radius+0x1>
 180:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <radius+0x2>
 184:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <radius+0x3>
 188:	0e 94 6b 05 	call	0xad6	; 0xad6 <__mulsf3>
 18c:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <round_length>
 190:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <round_length+0x1>
 194:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <round_length+0x2>
 198:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <round_length+0x3>
	angle_length =round_length/360*angle; // to calculate the length per step angle
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	44 eb       	ldi	r20, 0xB4	; 180
 1a2:	53 e4       	ldi	r21, 0x43	; 67
 1a4:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
 1a8:	9b 01       	movw	r18, r22
 1aa:	ac 01       	movw	r20, r24
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 6b 05 	call	0xad6	; 0xad6 <__mulsf3>
 1b4:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <angle_length>
 1b8:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <angle_length+0x1>
 1bc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <angle_length+0x2>
 1c0:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <angle_length+0x3>
}
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

000001ce <move_round_front>:
//according to the port energizing mechanism of a stepper motor
//Half step sequences (one-two phase excitation)
// function to complete a rotation
void move_round_front(void)
{
	PORTC = 0x01; // set a PC0 as high
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	30 e7       	ldi	r19, 0x70	; 112
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	30 40       	sbci	r19, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <move_round_front+0xa>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <move_round_front+0x14>
 1e2:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x05; // set both PC0 and PC2 as high
 1e4:	95 e0       	ldi	r25, 0x05	; 5
 1e6:	95 bb       	out	0x15, r25	; 21
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	30 e7       	ldi	r19, 0x70	; 112
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <move_round_front+0x20>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <move_round_front+0x2a>
 1f8:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x04; // set a PC2 as high
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	95 bb       	out	0x15, r25	; 21
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	30 e7       	ldi	r19, 0x70	; 112
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	21 50       	subi	r18, 0x01	; 1
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <move_round_front+0x36>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <move_round_front+0x40>
 20e:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x06; // set both PC1 and PC2 as high
 210:	96 e0       	ldi	r25, 0x06	; 6
 212:	95 bb       	out	0x15, r25	; 21
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	30 e7       	ldi	r19, 0x70	; 112
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	30 40       	sbci	r19, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <move_round_front+0x4c>
 222:	00 c0       	rjmp	.+0      	; 0x224 <move_round_front+0x56>
 224:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x02; // set a PC1 as high
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	95 bb       	out	0x15, r25	; 21
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	30 e7       	ldi	r19, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <move_round_front+0x62>
 238:	00 c0       	rjmp	.+0      	; 0x23a <move_round_front+0x6c>
 23a:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x0A; // set both PC1 and PC3 as high
 23c:	9a e0       	ldi	r25, 0x0A	; 10
 23e:	95 bb       	out	0x15, r25	; 21
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	30 e7       	ldi	r19, 0x70	; 112
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	21 50       	subi	r18, 0x01	; 1
 248:	30 40       	sbci	r19, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <move_round_front+0x78>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <move_round_front+0x82>
 250:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x08; // set a PC3 as high
 252:	98 e0       	ldi	r25, 0x08	; 8
 254:	95 bb       	out	0x15, r25	; 21
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	30 e7       	ldi	r19, 0x70	; 112
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <move_round_front+0x8e>
 264:	00 c0       	rjmp	.+0      	; 0x266 <move_round_front+0x98>
 266:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x09; // set both PC0 and PC3 as high
 268:	99 e0       	ldi	r25, 0x09	; 9
 26a:	95 bb       	out	0x15, r25	; 21
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	30 e7       	ldi	r19, 0x70	; 112
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	21 50       	subi	r18, 0x01	; 1
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <move_round_front+0xa4>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <move_round_front+0xae>
 27c:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x01; // set a PC0 as high
 27e:	85 bb       	out	0x15, r24	; 21
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	30 e7       	ldi	r19, 0x70	; 112
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	21 50       	subi	r18, 0x01	; 1
 288:	30 40       	sbci	r19, 0x00	; 0
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <move_round_front+0xb8>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <move_round_front+0xc2>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <move_angles_front>:
}

// function to a complete relevant steps( remaining angles )
// angles = remaining angles to complete
void move_angles_front(float angles)
{
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	6b 01       	movw	r12, r22
 2a2:	7c 01       	movw	r14, r24
	int i=0;
	if (angles>0)
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	a9 01       	movw	r20, r18
 2aa:	0e 94 66 05 	call	0xacc	; 0xacc <__gesf2>
 2ae:	18 16       	cp	r1, r24
 2b0:	0c f0       	brlt	.+2      	; 0x2b4 <move_angles_front+0x20>
 2b2:	f2 c0       	rjmp	.+484    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		while (1)
		{
			PORTC = 0x01; // set a PC0 as high
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	85 bb       	out	0x15, r24	; 21
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	80 e7       	ldi	r24, 0x70	; 112
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <move_angles_front+0x2e>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <move_angles_front+0x38>
 2cc:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x05; // set both PC0 and PC2 as high
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	85 bb       	out	0x15, r24	; 21
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	80 e7       	ldi	r24, 0x70	; 112
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <move_angles_front+0x44>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <move_angles_front+0x4e>
 2e2:	00 00       	nop
			_delay_ms(period);
			i++;
 2e4:	be 01       	movw	r22, r28
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 2ea:	07 2e       	mov	r0, r23
 2ec:	00 0c       	add	r0, r0
 2ee:	88 0b       	sbc	r24, r24
 2f0:	99 0b       	sbc	r25, r25
 2f2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 2f6:	9b 01       	movw	r18, r22
 2f8:	ac 01       	movw	r20, r24
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 302:	18 16       	cp	r1, r24
 304:	0c f0       	brlt	.+2      	; 0x308 <move_angles_front+0x74>
 306:	c8 c0       	rjmp	.+400    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x04; // set a PC2 as high
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	85 bb       	out	0x15, r24	; 21
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	80 e7       	ldi	r24, 0x70	; 112
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <move_angles_front+0x7e>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <move_angles_front+0x88>
 31c:	00 00       	nop
			_delay_ms(period);
			i++;
 31e:	be 01       	movw	r22, r28
 320:	6e 5f       	subi	r22, 0xFE	; 254
 322:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 324:	07 2e       	mov	r0, r23
 326:	00 0c       	add	r0, r0
 328:	88 0b       	sbc	r24, r24
 32a:	99 0b       	sbc	r25, r25
 32c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 330:	9b 01       	movw	r18, r22
 332:	ac 01       	movw	r20, r24
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 33c:	18 16       	cp	r1, r24
 33e:	0c f0       	brlt	.+2      	; 0x342 <move_angles_front+0xae>
 340:	ab c0       	rjmp	.+342    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x06; // set both PC1 and PC2 as high
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	85 bb       	out	0x15, r24	; 21
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	80 e7       	ldi	r24, 0x70	; 112
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <move_angles_front+0xb8>
 354:	00 c0       	rjmp	.+0      	; 0x356 <move_angles_front+0xc2>
 356:	00 00       	nop
			_delay_ms(period);
			i++;
 358:	be 01       	movw	r22, r28
 35a:	6d 5f       	subi	r22, 0xFD	; 253
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 35e:	07 2e       	mov	r0, r23
 360:	00 0c       	add	r0, r0
 362:	88 0b       	sbc	r24, r24
 364:	99 0b       	sbc	r25, r25
 366:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 36a:	9b 01       	movw	r18, r22
 36c:	ac 01       	movw	r20, r24
 36e:	c7 01       	movw	r24, r14
 370:	b6 01       	movw	r22, r12
 372:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 376:	18 16       	cp	r1, r24
 378:	0c f0       	brlt	.+2      	; 0x37c <move_angles_front+0xe8>
 37a:	8e c0       	rjmp	.+284    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x02; // set a PC1 as high
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	85 bb       	out	0x15, r24	; 21
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	80 e7       	ldi	r24, 0x70	; 112
 384:	92 e0       	ldi	r25, 0x02	; 2
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <move_angles_front+0xf2>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <move_angles_front+0xfc>
 390:	00 00       	nop
			_delay_ms(period);
			i++;
 392:	be 01       	movw	r22, r28
 394:	6c 5f       	subi	r22, 0xFC	; 252
 396:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 398:	07 2e       	mov	r0, r23
 39a:	00 0c       	add	r0, r0
 39c:	88 0b       	sbc	r24, r24
 39e:	99 0b       	sbc	r25, r25
 3a0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 3a4:	9b 01       	movw	r18, r22
 3a6:	ac 01       	movw	r20, r24
 3a8:	c7 01       	movw	r24, r14
 3aa:	b6 01       	movw	r22, r12
 3ac:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 3b0:	18 16       	cp	r1, r24
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <move_angles_front+0x122>
 3b4:	71 c0       	rjmp	.+226    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x0A; // set both PC1 and PC3 as high
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	85 bb       	out	0x15, r24	; 21
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	80 e7       	ldi	r24, 0x70	; 112
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <move_angles_front+0x12c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <move_angles_front+0x136>
 3ca:	00 00       	nop
			_delay_ms(period);
			i++;
 3cc:	be 01       	movw	r22, r28
 3ce:	6b 5f       	subi	r22, 0xFB	; 251
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 3d2:	07 2e       	mov	r0, r23
 3d4:	00 0c       	add	r0, r0
 3d6:	88 0b       	sbc	r24, r24
 3d8:	99 0b       	sbc	r25, r25
 3da:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 3de:	9b 01       	movw	r18, r22
 3e0:	ac 01       	movw	r20, r24
 3e2:	c7 01       	movw	r24, r14
 3e4:	b6 01       	movw	r22, r12
 3e6:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 3ea:	18 16       	cp	r1, r24
 3ec:	0c f0       	brlt	.+2      	; 0x3f0 <move_angles_front+0x15c>
 3ee:	54 c0       	rjmp	.+168    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x08; // set a PC3 as high
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	85 bb       	out	0x15, r24	; 21
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	80 e7       	ldi	r24, 0x70	; 112
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <move_angles_front+0x166>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
			_delay_ms(period);
			i++;
 406:	be 01       	movw	r22, r28
 408:	6a 5f       	subi	r22, 0xFA	; 250
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 40c:	07 2e       	mov	r0, r23
 40e:	00 0c       	add	r0, r0
 410:	88 0b       	sbc	r24, r24
 412:	99 0b       	sbc	r25, r25
 414:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 418:	9b 01       	movw	r18, r22
 41a:	ac 01       	movw	r20, r24
 41c:	c7 01       	movw	r24, r14
 41e:	b6 01       	movw	r22, r12
 420:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 424:	18 16       	cp	r1, r24
 426:	c4 f5       	brge	.+112    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x09; // set both PC0 and PC3 as high
 428:	89 e0       	ldi	r24, 0x09	; 9
 42a:	85 bb       	out	0x15, r24	; 21
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	80 e7       	ldi	r24, 0x70	; 112
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
			_delay_ms(period);
			i++;
 43e:	be 01       	movw	r22, r28
 440:	69 5f       	subi	r22, 0xF9	; 249
 442:	7f 4f       	sbci	r23, 0xFF	; 255
			if (i>=angles)
 444:	07 2e       	mov	r0, r23
 446:	00 0c       	add	r0, r0
 448:	88 0b       	sbc	r24, r24
 44a:	99 0b       	sbc	r25, r25
 44c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	c7 01       	movw	r24, r14
 456:	b6 01       	movw	r22, r12
 458:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 45c:	18 16       	cp	r1, r24
 45e:	e4 f4       	brge	.+56     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			{
				break;
			}
			PORTC = 0x01; // set a PC0 as high
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	85 bb       	out	0x15, r24	; 21
 464:	2f ef       	ldi	r18, 0xFF	; 255
 466:	80 e7       	ldi	r24, 0x70	; 112
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 474:	00 00       	nop
			_delay_ms(period);
			i++;
 476:	28 96       	adiw	r28, 0x08	; 8
			if (i>=angles)
 478:	be 01       	movw	r22, r28
 47a:	0d 2e       	mov	r0, r29
 47c:	00 0c       	add	r0, r0
 47e:	88 0b       	sbc	r24, r24
 480:	99 0b       	sbc	r25, r25
 482:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	c7 01       	movw	r24, r14
 48c:	b6 01       	movw	r22, r12
 48e:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 492:	18 16       	cp	r1, r24
 494:	0c f4       	brge	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	10 cf       	rjmp	.-480    	; 0x2b8 <move_angles_front+0x24>
			{
				break;
			}
		}
	}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	df 90       	pop	r13
 4a2:	cf 90       	pop	r12
 4a4:	08 95       	ret

000004a6 <wheel_Moving_front>:
	angle_length =round_length/360*angle; // to calculate the length per step angle
}

// function to move the conveyor(operate the stepper motor) as our requirement
void wheel_Moving_front(void)
{
 4a6:	8f 92       	push	r8
 4a8:	9f 92       	push	r9
 4aa:	af 92       	push	r10
 4ac:	bf 92       	push	r11
 4ae:	cf 92       	push	r12
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
	
	full_rounds = floor(move_length/round_length); // to calculate the number of rotations, motor should rotated
 4be:	c0 90 62 00 	lds	r12, 0x0062	; 0x800062 <move_length>
 4c2:	d0 90 63 00 	lds	r13, 0x0063	; 0x800063 <move_length+0x1>
 4c6:	e0 90 64 00 	lds	r14, 0x0064	; 0x800064 <move_length+0x2>
 4ca:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <move_length+0x3>
 4ce:	80 90 74 00 	lds	r8, 0x0074	; 0x800074 <round_length>
 4d2:	90 90 75 00 	lds	r9, 0x0075	; 0x800075 <round_length+0x1>
 4d6:	a0 90 76 00 	lds	r10, 0x0076	; 0x800076 <round_length+0x2>
 4da:	b0 90 77 00 	lds	r11, 0x0077	; 0x800077 <round_length+0x3>
 4de:	a5 01       	movw	r20, r10
 4e0:	94 01       	movw	r18, r8
 4e2:	c7 01       	movw	r24, r14
 4e4:	b6 01       	movw	r22, r12
 4e6:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
 4ea:	0e 94 99 04 	call	0x932	; 0x932 <floor>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <full_rounds>
 4f6:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <full_rounds+0x1>
 4fa:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <full_rounds+0x2>
 4fe:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <full_rounds+0x3>
	balance_length = move_length - (full_rounds*round_length); // to calculate remaining length should completed by using step angles
 502:	c5 01       	movw	r24, r10
 504:	b4 01       	movw	r22, r8
 506:	0e 94 6b 05 	call	0xad6	; 0xad6 <__mulsf3>
 50a:	9b 01       	movw	r18, r22
 50c:	ac 01       	movw	r20, r24
 50e:	c7 01       	movw	r24, r14
 510:	b6 01       	movw	r22, r12
 512:	0e 94 49 03 	call	0x692	; 0x692 <__subsf3>
 516:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <balance_length>
 51a:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <balance_length+0x1>
 51e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <balance_length+0x2>
 522:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <balance_length+0x3>
	angle_needed = floor(balance_length/angle_length); // to calculate the remaining angles, motor should completed
 526:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <angle_length>
 52a:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <angle_length+0x1>
 52e:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <angle_length+0x2>
 532:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <angle_length+0x3>
 536:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
 53a:	0e 94 99 04 	call	0x932	; 0x932 <floor>
 53e:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixunssfsi>
 542:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <angle_needed>
	
	//this loop is executed until completing full rounds according to calculations
	for (int i=0; i<full_rounds; i++)
 546:	00 e0       	ldi	r16, 0x00	; 0
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	1b c0       	rjmp	.+54     	; 0x582 <wheel_Moving_front+0xdc>
	{
		// this is executed until completing the no of rotations per round
		for (int j=0; j<rounds_per_Round; j++)
		{
			move_round_front();
 54c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <move_round_front>
	
	//this loop is executed until completing full rounds according to calculations
	for (int i=0; i<full_rounds; i++)
	{
		// this is executed until completing the no of rotations per round
		for (int j=0; j<rounds_per_Round; j++)
 550:	21 96       	adiw	r28, 0x01	; 1
 552:	02 c0       	rjmp	.+4      	; 0x558 <wheel_Moving_front+0xb2>
 554:	c0 e0       	ldi	r28, 0x00	; 0
 556:	d0 e0       	ldi	r29, 0x00	; 0
 558:	be 01       	movw	r22, r28
 55a:	0d 2e       	mov	r0, r29
 55c:	00 0c       	add	r0, r0
 55e:	88 0b       	sbc	r24, r24
 560:	99 0b       	sbc	r25, r25
 562:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 566:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <rounds_per_Round>
 56a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <rounds_per_Round+0x1>
 56e:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <rounds_per_Round+0x2>
 572:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <rounds_per_Round+0x3>
 576:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 57a:	88 23       	and	r24, r24
 57c:	3c f3       	brlt	.-50     	; 0x54c <wheel_Moving_front+0xa6>
	full_rounds = floor(move_length/round_length); // to calculate the number of rotations, motor should rotated
	balance_length = move_length - (full_rounds*round_length); // to calculate remaining length should completed by using step angles
	angle_needed = floor(balance_length/angle_length); // to calculate the remaining angles, motor should completed
	
	//this loop is executed until completing full rounds according to calculations
	for (int i=0; i<full_rounds; i++)
 57e:	0f 5f       	subi	r16, 0xFF	; 255
 580:	1f 4f       	sbci	r17, 0xFF	; 255
 582:	b8 01       	movw	r22, r16
 584:	01 2e       	mov	r0, r17
 586:	00 0c       	add	r0, r0
 588:	88 0b       	sbc	r24, r24
 58a:	99 0b       	sbc	r25, r25
 58c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatsisf>
 590:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <full_rounds>
 594:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <full_rounds+0x1>
 598:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <full_rounds+0x2>
 59c:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <full_rounds+0x3>
 5a0:	0e 94 b6 03 	call	0x76c	; 0x76c <__cmpsf2>
 5a4:	88 23       	and	r24, r24
 5a6:	b4 f2       	brlt	.-84     	; 0x554 <wheel_Moving_front+0xae>
		{
			move_round_front();
		}
	}
	// to complete remaining angels
	move_angles_front(angle_needed);
 5a8:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <angle_needed>
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatunsisf>
 5b6:	0e 94 4a 01 	call	0x294	; 0x294 <move_angles_front>
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	ff 90       	pop	r15
 5c4:	ef 90       	pop	r14
 5c6:	df 90       	pop	r13
 5c8:	cf 90       	pop	r12
 5ca:	bf 90       	pop	r11
 5cc:	af 90       	pop	r10
 5ce:	9f 90       	pop	r9
 5d0:	8f 90       	pop	r8
 5d2:	08 95       	ret

000005d4 <main>:
int paid=1; //Check whether paid or not (If paid student, paid=1)
int num=1, No_of_execution=1;//# of execution of the entire code

int main(void)
{
	init_io();
 5d4:	0e 94 51 00 	call	0xa2	; 0xa2 <init_io>
	init_servo();
 5d8:	0e 94 10 03 	call	0x620	; 0x620 <init_servo>
	setup_wheel();
 5dc:	0e 94 92 00 	call	0x124	; 0x124 <setup_wheel>
	init_DC();
 5e0:	0e 94 49 00 	call	0x92	; 0x92 <init_DC>
    while (1) 
    {
		if (Teacher==1)
 5e4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 5e8:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	d1 f3       	breq	.-12     	; 0x5e4 <main+0x10>
			//rest parts of the machine do not work
			//Door open
		}
		else
		{
	      if (paid==1)
 5f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5f4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	79 f4       	brne	.+30     	; 0x61a <main+0x46>
	      {
			 Green_LED(); 
 5fc:	0e 94 7b 00 	call	0xf6	; 0xf6 <Green_LED>
			 SERVO_CLOCKWISE();
 600:	0e 94 14 03 	call	0x628	; 0x628 <SERVO_CLOCKWISE>
			  wheel_Moving_front();
 604:	0e 94 53 02 	call	0x4a6	; 0x4a6 <wheel_Moving_front>
			 SERVO_ANTI_CLOCKWISE();
 608:	0e 94 2a 03 	call	0x654	; 0x654 <SERVO_ANTI_CLOCKWISE>
			 while(1)
			 {
				 DC_Rotate();
 60c:	0e 94 4c 00 	call	0x98	; 0x98 <DC_Rotate>
				 if(SENSE_IR_PORT & (1<<5))
 610:	b5 9b       	sbis	0x16, 5	; 22
 612:	fc cf       	rjmp	.-8      	; 0x60c <main+0x38>
				 {
					 DC_Stop();
 614:	0e 94 4f 00 	call	0x9e	; 0x9e <DC_Stop>
 618:	e5 cf       	rjmp	.-54     	; 0x5e4 <main+0x10>
			 }
			
	      }
		  else
		  {
			  Red_LED();
 61a:	0e 94 64 00 	call	0xc8	; 0xc8 <Red_LED>
 61e:	e2 cf       	rjmp	.-60     	; 0x5e4 <main+0x10>

00000620 <init_servo>:
//Function to initialize port settings
void init_servo()
{
	//Set Data Direction Register to output mode for
	// Servo Motor pin
	SERVO_DDR |= (1<<(SERVO_BIT));
 620:	87 b3       	in	r24, 0x17	; 23
 622:	88 60       	ori	r24, 0x08	; 8
 624:	87 bb       	out	0x17, r24	; 23
 626:	08 95       	ret

00000628 <SERVO_CLOCKWISE>:
}
// Function for Servo Motor Clockwise
void SERVO_CLOCKWISE()
{
	
	OUTPUT_SERVO_PORT |= 0x08; // set PB3 pin as high
 628:	88 b3       	in	r24, 0x18	; 24
 62a:	88 60       	ori	r24, 0x08	; 8
 62c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	8f e9       	ldi	r24, 0x9F	; 159
 630:	9f e0       	ldi	r25, 0x0F	; 15
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <SERVO_CLOCKWISE+0xa>
 636:	00 c0       	rjmp	.+0      	; 0x638 <SERVO_CLOCKWISE+0x10>
 638:	00 00       	nop
	_delay_us(2000); // to get shaft position at +90 degrees of its rotation (2ms)
	OUTPUT_SERVO_PORT &= ~(0x08); // set PB3 pin as low
 63a:	88 b3       	in	r24, 0x18	; 24
 63c:	87 7f       	andi	r24, 0xF7	; 247
 63e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	23 ed       	ldi	r18, 0xD3	; 211
 644:	80 e3       	ldi	r24, 0x30	; 48
 646:	91 50       	subi	r25, 0x01	; 1
 648:	20 40       	sbci	r18, 0x00	; 0
 64a:	80 40       	sbci	r24, 0x00	; 0
 64c:	e1 f7       	brne	.-8      	; 0x646 <SERVO_CLOCKWISE+0x1e>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <SERVO_CLOCKWISE+0x28>
 650:	00 00       	nop
 652:	08 95       	ret

00000654 <SERVO_ANTI_CLOCKWISE>:
 654:	2f ef       	ldi	r18, 0xFF	; 255
 656:	83 ed       	ldi	r24, 0xD3	; 211
 658:	90 e3       	ldi	r25, 0x30	; 48
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	80 40       	sbci	r24, 0x00	; 0
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <SERVO_ANTI_CLOCKWISE+0x6>
 662:	00 c0       	rjmp	.+0      	; 0x664 <SERVO_ANTI_CLOCKWISE+0x10>
 664:	00 00       	nop
}
// Function for Servo Motor Anti-Clockwise
void SERVO_ANTI_CLOCKWISE()
{
	_delay_ms(2000);
	OUTPUT_SERVO_PORT |= 0x08; // set PB3 pin as high
 666:	88 b3       	in	r24, 0x18	; 24
 668:	88 60       	ori	r24, 0x08	; 8
 66a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66c:	87 eb       	ldi	r24, 0xB7	; 183
 66e:	9b e0       	ldi	r25, 0x0B	; 11
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <SERVO_ANTI_CLOCKWISE+0x1c>
 674:	00 c0       	rjmp	.+0      	; 0x676 <SERVO_ANTI_CLOCKWISE+0x22>
 676:	00 00       	nop
	_delay_us(1500); // to get shaft position at 0 degrees of its rotation (1.5ms)
	OUTPUT_SERVO_PORT &= ~(0x08); // set PB3 pin as low
 678:	88 b3       	in	r24, 0x18	; 24
 67a:	87 7f       	andi	r24, 0xF7	; 247
 67c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	23 ed       	ldi	r18, 0xD3	; 211
 682:	80 e3       	ldi	r24, 0x30	; 48
 684:	91 50       	subi	r25, 0x01	; 1
 686:	20 40       	sbci	r18, 0x00	; 0
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	e1 f7       	brne	.-8      	; 0x684 <SERVO_ANTI_CLOCKWISE+0x30>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <SERVO_ANTI_CLOCKWISE+0x3a>
 68e:	00 00       	nop
 690:	08 95       	ret

00000692 <__subsf3>:
 692:	50 58       	subi	r21, 0x80	; 128

00000694 <__addsf3>:
 694:	bb 27       	eor	r27, r27
 696:	aa 27       	eor	r26, r26
 698:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__addsf3x>
 69c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
 6a0:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
 6a4:	38 f0       	brcs	.+14     	; 0x6b4 <__addsf3+0x20>
 6a6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__addsf3+0x20>
 6ac:	39 f4       	brne	.+14     	; 0x6bc <__addsf3+0x28>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	19 f4       	brne	.+6      	; 0x6b8 <__addsf3+0x24>
 6b2:	26 f4       	brtc	.+8      	; 0x6bc <__addsf3+0x28>
 6b4:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 6b8:	0e f4       	brtc	.+2      	; 0x6bc <__addsf3+0x28>
 6ba:	e0 95       	com	r30
 6bc:	e7 fb       	bst	r30, 7
 6be:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>

000006c2 <__addsf3x>:
 6c2:	e9 2f       	mov	r30, r25
 6c4:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
 6c8:	58 f3       	brcs	.-42     	; 0x6a0 <__addsf3+0xc>
 6ca:	ba 17       	cp	r27, r26
 6cc:	62 07       	cpc	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	95 07       	cpc	r25, r21
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__addsf3x+0x1c>
 6d6:	79 f4       	brne	.+30     	; 0x6f6 <__addsf3x+0x34>
 6d8:	a6 f5       	brtc	.+104    	; 0x742 <__addsf3x+0x80>
 6da:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_zero>
 6de:	0e f4       	brtc	.+2      	; 0x6e2 <__addsf3x+0x20>
 6e0:	e0 95       	com	r30
 6e2:	0b 2e       	mov	r0, r27
 6e4:	ba 2f       	mov	r27, r26
 6e6:	a0 2d       	mov	r26, r0
 6e8:	0b 01       	movw	r0, r22
 6ea:	b9 01       	movw	r22, r18
 6ec:	90 01       	movw	r18, r0
 6ee:	0c 01       	movw	r0, r24
 6f0:	ca 01       	movw	r24, r20
 6f2:	a0 01       	movw	r20, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	ff 27       	eor	r31, r31
 6f8:	59 1b       	sub	r21, r25
 6fa:	99 f0       	breq	.+38     	; 0x722 <__addsf3x+0x60>
 6fc:	59 3f       	cpi	r21, 0xF9	; 249
 6fe:	50 f4       	brcc	.+20     	; 0x714 <__addsf3x+0x52>
 700:	50 3e       	cpi	r21, 0xE0	; 224
 702:	68 f1       	brcs	.+90     	; 0x75e <__addsf3x+0x9c>
 704:	1a 16       	cp	r1, r26
 706:	f0 40       	sbci	r31, 0x00	; 0
 708:	a2 2f       	mov	r26, r18
 70a:	23 2f       	mov	r18, r19
 70c:	34 2f       	mov	r19, r20
 70e:	44 27       	eor	r20, r20
 710:	58 5f       	subi	r21, 0xF8	; 248
 712:	f3 cf       	rjmp	.-26     	; 0x6fa <__addsf3x+0x38>
 714:	46 95       	lsr	r20
 716:	37 95       	ror	r19
 718:	27 95       	ror	r18
 71a:	a7 95       	ror	r26
 71c:	f0 40       	sbci	r31, 0x00	; 0
 71e:	53 95       	inc	r21
 720:	c9 f7       	brne	.-14     	; 0x714 <__addsf3x+0x52>
 722:	7e f4       	brtc	.+30     	; 0x742 <__addsf3x+0x80>
 724:	1f 16       	cp	r1, r31
 726:	ba 0b       	sbc	r27, r26
 728:	62 0b       	sbc	r22, r18
 72a:	73 0b       	sbc	r23, r19
 72c:	84 0b       	sbc	r24, r20
 72e:	ba f0       	brmi	.+46     	; 0x75e <__addsf3x+0x9c>
 730:	91 50       	subi	r25, 0x01	; 1
 732:	a1 f0       	breq	.+40     	; 0x75c <__addsf3x+0x9a>
 734:	ff 0f       	add	r31, r31
 736:	bb 1f       	adc	r27, r27
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	c2 f7       	brpl	.-16     	; 0x730 <__addsf3x+0x6e>
 740:	0e c0       	rjmp	.+28     	; 0x75e <__addsf3x+0x9c>
 742:	ba 0f       	add	r27, r26
 744:	62 1f       	adc	r22, r18
 746:	73 1f       	adc	r23, r19
 748:	84 1f       	adc	r24, r20
 74a:	48 f4       	brcc	.+18     	; 0x75e <__addsf3x+0x9c>
 74c:	87 95       	ror	r24
 74e:	77 95       	ror	r23
 750:	67 95       	ror	r22
 752:	b7 95       	ror	r27
 754:	f7 95       	ror	r31
 756:	9e 3f       	cpi	r25, 0xFE	; 254
 758:	08 f0       	brcs	.+2      	; 0x75c <__addsf3x+0x9a>
 75a:	b0 cf       	rjmp	.-160    	; 0x6bc <__addsf3+0x28>
 75c:	93 95       	inc	r25
 75e:	88 0f       	add	r24, r24
 760:	08 f0       	brcs	.+2      	; 0x764 <__addsf3x+0xa2>
 762:	99 27       	eor	r25, r25
 764:	ee 0f       	add	r30, r30
 766:	97 95       	ror	r25
 768:	87 95       	ror	r24
 76a:	08 95       	ret

0000076c <__cmpsf2>:
 76c:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_cmp>
 770:	08 f4       	brcc	.+2      	; 0x774 <__cmpsf2+0x8>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	08 95       	ret

00000776 <__divsf3>:
 776:	0e 94 cf 03 	call	0x79e	; 0x79e <__divsf3x>
 77a:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
 77e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
 782:	58 f0       	brcs	.+22     	; 0x79a <__divsf3+0x24>
 784:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
 788:	40 f0       	brcs	.+16     	; 0x79a <__divsf3+0x24>
 78a:	29 f4       	brne	.+10     	; 0x796 <__divsf3+0x20>
 78c:	5f 3f       	cpi	r21, 0xFF	; 255
 78e:	29 f0       	breq	.+10     	; 0x79a <__divsf3+0x24>
 790:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>
 794:	51 11       	cpse	r21, r1
 796:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_szero>
 79a:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>

0000079e <__divsf3x>:
 79e:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
 7a2:	68 f3       	brcs	.-38     	; 0x77e <__divsf3+0x8>

000007a4 <__divsf3_pse>:
 7a4:	99 23       	and	r25, r25
 7a6:	b1 f3       	breq	.-20     	; 0x794 <__divsf3+0x1e>
 7a8:	55 23       	and	r21, r21
 7aa:	91 f3       	breq	.-28     	; 0x790 <__divsf3+0x1a>
 7ac:	95 1b       	sub	r25, r21
 7ae:	55 0b       	sbc	r21, r21
 7b0:	bb 27       	eor	r27, r27
 7b2:	aa 27       	eor	r26, r26
 7b4:	62 17       	cp	r22, r18
 7b6:	73 07       	cpc	r23, r19
 7b8:	84 07       	cpc	r24, r20
 7ba:	38 f0       	brcs	.+14     	; 0x7ca <__divsf3_pse+0x26>
 7bc:	9f 5f       	subi	r25, 0xFF	; 255
 7be:	5f 4f       	sbci	r21, 0xFF	; 255
 7c0:	22 0f       	add	r18, r18
 7c2:	33 1f       	adc	r19, r19
 7c4:	44 1f       	adc	r20, r20
 7c6:	aa 1f       	adc	r26, r26
 7c8:	a9 f3       	breq	.-22     	; 0x7b4 <__divsf3_pse+0x10>
 7ca:	35 d0       	rcall	.+106    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7cc:	0e 2e       	mov	r0, r30
 7ce:	3a f0       	brmi	.+14     	; 0x7de <__divsf3_pse+0x3a>
 7d0:	e0 e8       	ldi	r30, 0x80	; 128
 7d2:	32 d0       	rcall	.+100    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7d4:	91 50       	subi	r25, 0x01	; 1
 7d6:	50 40       	sbci	r21, 0x00	; 0
 7d8:	e6 95       	lsr	r30
 7da:	00 1c       	adc	r0, r0
 7dc:	ca f7       	brpl	.-14     	; 0x7d0 <__divsf3_pse+0x2c>
 7de:	2b d0       	rcall	.+86     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7e0:	fe 2f       	mov	r31, r30
 7e2:	29 d0       	rcall	.+82     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7e4:	66 0f       	add	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	bb 1f       	adc	r27, r27
 7ec:	26 17       	cp	r18, r22
 7ee:	37 07       	cpc	r19, r23
 7f0:	48 07       	cpc	r20, r24
 7f2:	ab 07       	cpc	r26, r27
 7f4:	b0 e8       	ldi	r27, 0x80	; 128
 7f6:	09 f0       	breq	.+2      	; 0x7fa <__divsf3_pse+0x56>
 7f8:	bb 0b       	sbc	r27, r27
 7fa:	80 2d       	mov	r24, r0
 7fc:	bf 01       	movw	r22, r30
 7fe:	ff 27       	eor	r31, r31
 800:	93 58       	subi	r25, 0x83	; 131
 802:	5f 4f       	sbci	r21, 0xFF	; 255
 804:	3a f0       	brmi	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 806:	9e 3f       	cpi	r25, 0xFE	; 254
 808:	51 05       	cpc	r21, r1
 80a:	78 f0       	brcs	.+30     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>
 810:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_szero>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	e4 f3       	brlt	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	98 3e       	cpi	r25, 0xE8	; 232
 81a:	d4 f3       	brlt	.-12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 81c:	86 95       	lsr	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	f7 95       	ror	r31
 826:	9f 5f       	subi	r25, 0xFF	; 255
 828:	c9 f7       	brne	.-14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82a:	88 0f       	add	r24, r24
 82c:	91 1d       	adc	r25, r1
 82e:	96 95       	lsr	r25
 830:	87 95       	ror	r24
 832:	97 f9       	bld	r25, 7
 834:	08 95       	ret
 836:	e1 e0       	ldi	r30, 0x01	; 1
 838:	66 0f       	add	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	88 1f       	adc	r24, r24
 83e:	bb 1f       	adc	r27, r27
 840:	62 17       	cp	r22, r18
 842:	73 07       	cpc	r23, r19
 844:	84 07       	cpc	r24, r20
 846:	ba 07       	cpc	r27, r26
 848:	20 f0       	brcs	.+8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84a:	62 1b       	sub	r22, r18
 84c:	73 0b       	sbc	r23, r19
 84e:	84 0b       	sbc	r24, r20
 850:	ba 0b       	sbc	r27, r26
 852:	ee 1f       	adc	r30, r30
 854:	88 f7       	brcc	.-30     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 856:	e0 95       	com	r30
 858:	08 95       	ret

0000085a <__fixunssfsi>:
 85a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_splitA>
 85e:	88 f0       	brcs	.+34     	; 0x882 <__stack+0x23>
 860:	9f 57       	subi	r25, 0x7F	; 127
 862:	98 f0       	brcs	.+38     	; 0x88a <__stack+0x2b>
 864:	b9 2f       	mov	r27, r25
 866:	99 27       	eor	r25, r25
 868:	b7 51       	subi	r27, 0x17	; 23
 86a:	b0 f0       	brcs	.+44     	; 0x898 <__stack+0x39>
 86c:	e1 f0       	breq	.+56     	; 0x8a6 <__stack+0x47>
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	1a f0       	brmi	.+6      	; 0x87e <__stack+0x1f>
 878:	ba 95       	dec	r27
 87a:	c9 f7       	brne	.-14     	; 0x86e <__stack+0xf>
 87c:	14 c0       	rjmp	.+40     	; 0x8a6 <__stack+0x47>
 87e:	b1 30       	cpi	r27, 0x01	; 1
 880:	91 f0       	breq	.+36     	; 0x8a6 <__stack+0x47>
 882:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_zero>
 886:	b1 e0       	ldi	r27, 0x01	; 1
 888:	08 95       	ret
 88a:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_zero>
 88e:	67 2f       	mov	r22, r23
 890:	78 2f       	mov	r23, r24
 892:	88 27       	eor	r24, r24
 894:	b8 5f       	subi	r27, 0xF8	; 248
 896:	39 f0       	breq	.+14     	; 0x8a6 <__stack+0x47>
 898:	b9 3f       	cpi	r27, 0xF9	; 249
 89a:	cc f3       	brlt	.-14     	; 0x88e <__stack+0x2f>
 89c:	86 95       	lsr	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	b3 95       	inc	r27
 8a4:	d9 f7       	brne	.-10     	; 0x89c <__stack+0x3d>
 8a6:	3e f4       	brtc	.+14     	; 0x8b6 <__stack+0x57>
 8a8:	90 95       	com	r25
 8aa:	80 95       	com	r24
 8ac:	70 95       	com	r23
 8ae:	61 95       	neg	r22
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	08 95       	ret

000008b8 <__floatunsisf>:
 8b8:	e8 94       	clt
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__floatsisf+0x12>

000008bc <__floatsisf>:
 8bc:	97 fb       	bst	r25, 7
 8be:	3e f4       	brtc	.+14     	; 0x8ce <__floatsisf+0x12>
 8c0:	90 95       	com	r25
 8c2:	80 95       	com	r24
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	99 23       	and	r25, r25
 8d0:	a9 f0       	breq	.+42     	; 0x8fc <__floatsisf+0x40>
 8d2:	f9 2f       	mov	r31, r25
 8d4:	96 e9       	ldi	r25, 0x96	; 150
 8d6:	bb 27       	eor	r27, r27
 8d8:	93 95       	inc	r25
 8da:	f6 95       	lsr	r31
 8dc:	87 95       	ror	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f1 11       	cpse	r31, r1
 8e6:	f8 cf       	rjmp	.-16     	; 0x8d8 <__floatsisf+0x1c>
 8e8:	fa f4       	brpl	.+62     	; 0x928 <__floatsisf+0x6c>
 8ea:	bb 0f       	add	r27, r27
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <__floatsisf+0x36>
 8ee:	60 ff       	sbrs	r22, 0
 8f0:	1b c0       	rjmp	.+54     	; 0x928 <__floatsisf+0x6c>
 8f2:	6f 5f       	subi	r22, 0xFF	; 255
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <__floatsisf+0x6c>
 8fc:	88 23       	and	r24, r24
 8fe:	11 f0       	breq	.+4      	; 0x904 <__floatsisf+0x48>
 900:	96 e9       	ldi	r25, 0x96	; 150
 902:	11 c0       	rjmp	.+34     	; 0x926 <__floatsisf+0x6a>
 904:	77 23       	and	r23, r23
 906:	21 f0       	breq	.+8      	; 0x910 <__floatsisf+0x54>
 908:	9e e8       	ldi	r25, 0x8E	; 142
 90a:	87 2f       	mov	r24, r23
 90c:	76 2f       	mov	r23, r22
 90e:	05 c0       	rjmp	.+10     	; 0x91a <__floatsisf+0x5e>
 910:	66 23       	and	r22, r22
 912:	71 f0       	breq	.+28     	; 0x930 <__floatsisf+0x74>
 914:	96 e8       	ldi	r25, 0x86	; 134
 916:	86 2f       	mov	r24, r22
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	2a f0       	brmi	.+10     	; 0x928 <__floatsisf+0x6c>
 91e:	9a 95       	dec	r25
 920:	66 0f       	add	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	da f7       	brpl	.-10     	; 0x91e <__floatsisf+0x62>
 928:	88 0f       	add	r24, r24
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <floor>:
 932:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_trunc>
 936:	90 f0       	brcs	.+36     	; 0x95c <floor+0x2a>
 938:	9f 37       	cpi	r25, 0x7F	; 127
 93a:	48 f4       	brcc	.+18     	; 0x94e <floor+0x1c>
 93c:	91 11       	cpse	r25, r1
 93e:	16 f0       	brts	.+4      	; 0x944 <floor+0x12>
 940:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_szero>
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	80 e8       	ldi	r24, 0x80	; 128
 94a:	9f eb       	ldi	r25, 0xBF	; 191
 94c:	08 95       	ret
 94e:	26 f4       	brtc	.+8      	; 0x958 <floor+0x26>
 950:	1b 16       	cp	r1, r27
 952:	61 1d       	adc	r22, r1
 954:	71 1d       	adc	r23, r1
 956:	81 1d       	adc	r24, r1
 958:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_mintl>
 95c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_mpack>

00000960 <__fp_cmp>:
 960:	99 0f       	add	r25, r25
 962:	00 08       	sbc	r0, r0
 964:	55 0f       	add	r21, r21
 966:	aa 0b       	sbc	r26, r26
 968:	e0 e8       	ldi	r30, 0x80	; 128
 96a:	fe ef       	ldi	r31, 0xFE	; 254
 96c:	16 16       	cp	r1, r22
 96e:	17 06       	cpc	r1, r23
 970:	e8 07       	cpc	r30, r24
 972:	f9 07       	cpc	r31, r25
 974:	c0 f0       	brcs	.+48     	; 0x9a6 <__fp_cmp+0x46>
 976:	12 16       	cp	r1, r18
 978:	13 06       	cpc	r1, r19
 97a:	e4 07       	cpc	r30, r20
 97c:	f5 07       	cpc	r31, r21
 97e:	98 f0       	brcs	.+38     	; 0x9a6 <__fp_cmp+0x46>
 980:	62 1b       	sub	r22, r18
 982:	73 0b       	sbc	r23, r19
 984:	84 0b       	sbc	r24, r20
 986:	95 0b       	sbc	r25, r21
 988:	39 f4       	brne	.+14     	; 0x998 <__fp_cmp+0x38>
 98a:	0a 26       	eor	r0, r26
 98c:	61 f0       	breq	.+24     	; 0x9a6 <__fp_cmp+0x46>
 98e:	23 2b       	or	r18, r19
 990:	24 2b       	or	r18, r20
 992:	25 2b       	or	r18, r21
 994:	21 f4       	brne	.+8      	; 0x99e <__fp_cmp+0x3e>
 996:	08 95       	ret
 998:	0a 26       	eor	r0, r26
 99a:	09 f4       	brne	.+2      	; 0x99e <__fp_cmp+0x3e>
 99c:	a1 40       	sbci	r26, 0x01	; 1
 99e:	a6 95       	lsr	r26
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	81 1d       	adc	r24, r1
 9a4:	81 1d       	adc	r24, r1
 9a6:	08 95       	ret

000009a8 <__fp_inf>:
 9a8:	97 f9       	bld	r25, 7
 9aa:	9f 67       	ori	r25, 0x7F	; 127
 9ac:	80 e8       	ldi	r24, 0x80	; 128
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	08 95       	ret

000009b4 <__fp_mintl>:
 9b4:	88 23       	and	r24, r24
 9b6:	71 f4       	brne	.+28     	; 0x9d4 <__fp_mintl+0x20>
 9b8:	77 23       	and	r23, r23
 9ba:	21 f0       	breq	.+8      	; 0x9c4 <__fp_mintl+0x10>
 9bc:	98 50       	subi	r25, 0x08	; 8
 9be:	87 2b       	or	r24, r23
 9c0:	76 2f       	mov	r23, r22
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <__fp_mintl+0x1e>
 9c4:	66 23       	and	r22, r22
 9c6:	11 f4       	brne	.+4      	; 0x9cc <__fp_mintl+0x18>
 9c8:	99 27       	eor	r25, r25
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__fp_mintl+0x32>
 9cc:	90 51       	subi	r25, 0x10	; 16
 9ce:	86 2b       	or	r24, r22
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	2a f0       	brmi	.+10     	; 0x9e0 <__fp_mintl+0x2c>
 9d6:	9a 95       	dec	r25
 9d8:	66 0f       	add	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	da f7       	brpl	.-10     	; 0x9d6 <__fp_mintl+0x22>
 9e0:	88 0f       	add	r24, r24
 9e2:	96 95       	lsr	r25
 9e4:	87 95       	ror	r24
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <__fp_mpack>:
 9ea:	9f 3f       	cpi	r25, 0xFF	; 255
 9ec:	31 f0       	breq	.+12     	; 0x9fa <__fp_mpack_finite+0xc>

000009ee <__fp_mpack_finite>:
 9ee:	91 50       	subi	r25, 0x01	; 1
 9f0:	20 f4       	brcc	.+8      	; 0x9fa <__fp_mpack_finite+0xc>
 9f2:	87 95       	ror	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	88 0f       	add	r24, r24
 9fc:	91 1d       	adc	r25, r1
 9fe:	96 95       	lsr	r25
 a00:	87 95       	ror	r24
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret

00000a06 <__fp_nan>:
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	80 ec       	ldi	r24, 0xC0	; 192
 a0a:	08 95       	ret

00000a0c <__fp_pscA>:
 a0c:	00 24       	eor	r0, r0
 a0e:	0a 94       	dec	r0
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	18 06       	cpc	r1, r24
 a16:	09 06       	cpc	r0, r25
 a18:	08 95       	ret

00000a1a <__fp_pscB>:
 a1a:	00 24       	eor	r0, r0
 a1c:	0a 94       	dec	r0
 a1e:	12 16       	cp	r1, r18
 a20:	13 06       	cpc	r1, r19
 a22:	14 06       	cpc	r1, r20
 a24:	05 06       	cpc	r0, r21
 a26:	08 95       	ret

00000a28 <__fp_round>:
 a28:	09 2e       	mov	r0, r25
 a2a:	03 94       	inc	r0
 a2c:	00 0c       	add	r0, r0
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__fp_round+0xc>
 a30:	88 23       	and	r24, r24
 a32:	52 f0       	brmi	.+20     	; 0xa48 <__fp_round+0x20>
 a34:	bb 0f       	add	r27, r27
 a36:	40 f4       	brcc	.+16     	; 0xa48 <__fp_round+0x20>
 a38:	bf 2b       	or	r27, r31
 a3a:	11 f4       	brne	.+4      	; 0xa40 <__fp_round+0x18>
 a3c:	60 ff       	sbrs	r22, 0
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__fp_round+0x20>
 a40:	6f 5f       	subi	r22, 0xFF	; 255
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	08 95       	ret

00000a4a <__fp_split3>:
 a4a:	57 fd       	sbrc	r21, 7
 a4c:	90 58       	subi	r25, 0x80	; 128
 a4e:	44 0f       	add	r20, r20
 a50:	55 1f       	adc	r21, r21
 a52:	59 f0       	breq	.+22     	; 0xa6a <__fp_splitA+0x10>
 a54:	5f 3f       	cpi	r21, 0xFF	; 255
 a56:	71 f0       	breq	.+28     	; 0xa74 <__fp_splitA+0x1a>
 a58:	47 95       	ror	r20

00000a5a <__fp_splitA>:
 a5a:	88 0f       	add	r24, r24
 a5c:	97 fb       	bst	r25, 7
 a5e:	99 1f       	adc	r25, r25
 a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_splitA+0x20>
 a62:	9f 3f       	cpi	r25, 0xFF	; 255
 a64:	79 f0       	breq	.+30     	; 0xa84 <__fp_splitA+0x2a>
 a66:	87 95       	ror	r24
 a68:	08 95       	ret
 a6a:	12 16       	cp	r1, r18
 a6c:	13 06       	cpc	r1, r19
 a6e:	14 06       	cpc	r1, r20
 a70:	55 1f       	adc	r21, r21
 a72:	f2 cf       	rjmp	.-28     	; 0xa58 <__fp_split3+0xe>
 a74:	46 95       	lsr	r20
 a76:	f1 df       	rcall	.-30     	; 0xa5a <__fp_splitA>
 a78:	08 c0       	rjmp	.+16     	; 0xa8a <__fp_splitA+0x30>
 a7a:	16 16       	cp	r1, r22
 a7c:	17 06       	cpc	r1, r23
 a7e:	18 06       	cpc	r1, r24
 a80:	99 1f       	adc	r25, r25
 a82:	f1 cf       	rjmp	.-30     	; 0xa66 <__fp_splitA+0xc>
 a84:	86 95       	lsr	r24
 a86:	71 05       	cpc	r23, r1
 a88:	61 05       	cpc	r22, r1
 a8a:	08 94       	sec
 a8c:	08 95       	ret

00000a8e <__fp_trunc>:
 a8e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_splitA>
 a92:	a0 f0       	brcs	.+40     	; 0xabc <__fp_trunc+0x2e>
 a94:	be e7       	ldi	r27, 0x7E	; 126
 a96:	b9 17       	cp	r27, r25
 a98:	88 f4       	brcc	.+34     	; 0xabc <__fp_trunc+0x2e>
 a9a:	bb 27       	eor	r27, r27
 a9c:	9f 38       	cpi	r25, 0x8F	; 143
 a9e:	60 f4       	brcc	.+24     	; 0xab8 <__fp_trunc+0x2a>
 aa0:	16 16       	cp	r1, r22
 aa2:	b1 1d       	adc	r27, r1
 aa4:	67 2f       	mov	r22, r23
 aa6:	78 2f       	mov	r23, r24
 aa8:	88 27       	eor	r24, r24
 aaa:	98 5f       	subi	r25, 0xF8	; 248
 aac:	f7 cf       	rjmp	.-18     	; 0xa9c <__fp_trunc+0xe>
 aae:	86 95       	lsr	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b1 1d       	adc	r27, r1
 ab6:	93 95       	inc	r25
 ab8:	96 39       	cpi	r25, 0x96	; 150
 aba:	c8 f3       	brcs	.-14     	; 0xaae <__fp_trunc+0x20>
 abc:	08 95       	ret

00000abe <__fp_zero>:
 abe:	e8 94       	clt

00000ac0 <__fp_szero>:
 ac0:	bb 27       	eor	r27, r27
 ac2:	66 27       	eor	r22, r22
 ac4:	77 27       	eor	r23, r23
 ac6:	cb 01       	movw	r24, r22
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret

00000acc <__gesf2>:
 acc:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_cmp>
 ad0:	08 f4       	brcc	.+2      	; 0xad4 <__gesf2+0x8>
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__mulsf3>:
 ad6:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3x>
 ada:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
 ade:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
 ae2:	38 f0       	brcs	.+14     	; 0xaf2 <__mulsf3+0x1c>
 ae4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
 ae8:	20 f0       	brcs	.+8      	; 0xaf2 <__mulsf3+0x1c>
 aea:	95 23       	and	r25, r21
 aec:	11 f0       	breq	.+4      	; 0xaf2 <__mulsf3+0x1c>
 aee:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>
 af2:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 af6:	11 24       	eor	r1, r1
 af8:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_szero>

00000afc <__mulsf3x>:
 afc:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
 b00:	70 f3       	brcs	.-36     	; 0xade <__mulsf3+0x8>

00000b02 <__mulsf3_pse>:
 b02:	95 9f       	mul	r25, r21
 b04:	c1 f3       	breq	.-16     	; 0xaf6 <__mulsf3+0x20>
 b06:	95 0f       	add	r25, r21
 b08:	50 e0       	ldi	r21, 0x00	; 0
 b0a:	55 1f       	adc	r21, r21
 b0c:	62 9f       	mul	r22, r18
 b0e:	f0 01       	movw	r30, r0
 b10:	72 9f       	mul	r23, r18
 b12:	bb 27       	eor	r27, r27
 b14:	f0 0d       	add	r31, r0
 b16:	b1 1d       	adc	r27, r1
 b18:	63 9f       	mul	r22, r19
 b1a:	aa 27       	eor	r26, r26
 b1c:	f0 0d       	add	r31, r0
 b1e:	b1 1d       	adc	r27, r1
 b20:	aa 1f       	adc	r26, r26
 b22:	64 9f       	mul	r22, r20
 b24:	66 27       	eor	r22, r22
 b26:	b0 0d       	add	r27, r0
 b28:	a1 1d       	adc	r26, r1
 b2a:	66 1f       	adc	r22, r22
 b2c:	82 9f       	mul	r24, r18
 b2e:	22 27       	eor	r18, r18
 b30:	b0 0d       	add	r27, r0
 b32:	a1 1d       	adc	r26, r1
 b34:	62 1f       	adc	r22, r18
 b36:	73 9f       	mul	r23, r19
 b38:	b0 0d       	add	r27, r0
 b3a:	a1 1d       	adc	r26, r1
 b3c:	62 1f       	adc	r22, r18
 b3e:	83 9f       	mul	r24, r19
 b40:	a0 0d       	add	r26, r0
 b42:	61 1d       	adc	r22, r1
 b44:	22 1f       	adc	r18, r18
 b46:	74 9f       	mul	r23, r20
 b48:	33 27       	eor	r19, r19
 b4a:	a0 0d       	add	r26, r0
 b4c:	61 1d       	adc	r22, r1
 b4e:	23 1f       	adc	r18, r19
 b50:	84 9f       	mul	r24, r20
 b52:	60 0d       	add	r22, r0
 b54:	21 1d       	adc	r18, r1
 b56:	82 2f       	mov	r24, r18
 b58:	76 2f       	mov	r23, r22
 b5a:	6a 2f       	mov	r22, r26
 b5c:	11 24       	eor	r1, r1
 b5e:	9f 57       	subi	r25, 0x7F	; 127
 b60:	50 40       	sbci	r21, 0x00	; 0
 b62:	9a f0       	brmi	.+38     	; 0xb8a <__mulsf3_pse+0x88>
 b64:	f1 f0       	breq	.+60     	; 0xba2 <__mulsf3_pse+0xa0>
 b66:	88 23       	and	r24, r24
 b68:	4a f0       	brmi	.+18     	; 0xb7c <__mulsf3_pse+0x7a>
 b6a:	ee 0f       	add	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	bb 1f       	adc	r27, r27
 b70:	66 1f       	adc	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	91 50       	subi	r25, 0x01	; 1
 b78:	50 40       	sbci	r21, 0x00	; 0
 b7a:	a9 f7       	brne	.-22     	; 0xb66 <__mulsf3_pse+0x64>
 b7c:	9e 3f       	cpi	r25, 0xFE	; 254
 b7e:	51 05       	cpc	r21, r1
 b80:	80 f0       	brcs	.+32     	; 0xba2 <__mulsf3_pse+0xa0>
 b82:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>
 b86:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_szero>
 b8a:	5f 3f       	cpi	r21, 0xFF	; 255
 b8c:	e4 f3       	brlt	.-8      	; 0xb86 <__mulsf3_pse+0x84>
 b8e:	98 3e       	cpi	r25, 0xE8	; 232
 b90:	d4 f3       	brlt	.-12     	; 0xb86 <__mulsf3_pse+0x84>
 b92:	86 95       	lsr	r24
 b94:	77 95       	ror	r23
 b96:	67 95       	ror	r22
 b98:	b7 95       	ror	r27
 b9a:	f7 95       	ror	r31
 b9c:	e7 95       	ror	r30
 b9e:	9f 5f       	subi	r25, 0xFF	; 255
 ba0:	c1 f7       	brne	.-16     	; 0xb92 <__mulsf3_pse+0x90>
 ba2:	fe 2b       	or	r31, r30
 ba4:	88 0f       	add	r24, r24
 ba6:	91 1d       	adc	r25, r1
 ba8:	96 95       	lsr	r25
 baa:	87 95       	ror	r24
 bac:	97 f9       	bld	r25, 7
 bae:	08 95       	ret

00000bb0 <_exit>:
 bb0:	f8 94       	cli

00000bb2 <__stop_program>:
 bb2:	ff cf       	rjmp	.-2      	; 0xbb2 <__stop_program>
